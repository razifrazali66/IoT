#include <ESP8266WiFi.h>
#include "ThingSpeak.h"
#include "DHT.h"

// WiFi Network credentials
const char* ssid = "YOUR_WIFI_SSID";         // Your WiFi SSID
const char* password = "YOUR_WIFI_PASSWORD"; // Your WiFi Password

// ThingSpeak Channel Details
unsigned long myChannelNumber = YOUR_CHANNEL_ID; // Your ThingSpeak Channel ID (numeric)
const char * myWriteAPIKey = "YOUR_THINGSPEAK_WRITE_API_KEY"; // Your ThingSpeak Write API Key

// DHT Sensor Setup
#define DHTPIN D4       // What digital pin we're connected to (for NodeMCU, D4 is GPIO2)
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);

WiFiClient client; // WiFi client

// Timer variables
unsigned long lastConnectionTime = 0;
const unsigned long postingInterval = 20L * 1000L; // Post data every 20 seconds (ThingSpeak free plan has a 15-second limit per update)

void setup() {
  Serial.begin(115200);
  delay(10);

  Serial.println("DHT11 to ThingSpeak");

  // Initialize DHT sensor
  dht.begin();

  // Connect to WiFi
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  ThingSpeak.begin(client); // Initialize ThingSpeak
}

void loop() {
  // Wait at least 2 seconds between measurements.
  // DHT sensors are slow!
  if (millis() - lastConnectionTime > postingInterval) {
    // Read temperature and humidity values
    float h = dht.readHumidity();
    // Read temperature as Celsius (the default)
    float t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    // float f = dht.readTemperature(true);

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }

    Serial.print("Humidity: ");
    Serial.print(h);
    Serial.print(" %\t");
    Serial.print("Temperature: ");
    Serial.print(t);
    Serial.println(" *C");

    // Set the fields with the values
    ThingSpeak.setField(1, t); // Field 1 for Temperature
    ThingSpeak.setField(2, h); // Field 2 for Humidity

    // Write to the ThingSpeak channel
    int httpCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

    if (httpCode == 200) {
      Serial.println("Channel update successful.");
    } else {
      Serial.println("Problem updating channel. HTTP error code " + String(httpCode));
    }
    lastConnectionTime = millis();

    // ThingSpeak will disconnect the client after each write.
    // To ensure a new connection is established for the next write,
    // you might want to explicitly stop and restart the client if issues arise,
    // though the ThingSpeak library often handles this.
    // client.stop(); // Optional: May help in some network conditions
  }
}
